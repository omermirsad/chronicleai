
import { useState, useEffect } from 'react';
import { JournalEntry } from '../types';

const JOURNAL_STORAGE_KEY = 'chronicle-ai-journal';

export const useJournal = () => {
  const [entries, setEntries] = useState<JournalEntry[]>([]);

  useEffect(() => {
    try {
      const storedEntries = localStorage.getItem(JOURNAL_STORAGE_KEY);
      if (storedEntries) {
        setEntries(JSON.parse(storedEntries));
      }
    } catch (error) {
      console.error("Failed to load entries from localStorage", error);
    }
  }, []);

  const saveEntries = (updatedEntries: JournalEntry[]) => {
    try {
      localStorage.setItem(JOURNAL_STORAGE_KEY, JSON.stringify(updatedEntries));
      setEntries(updatedEntries);
    } catch (error) {
      console.error("Failed to save entries to localStorage", error);
    }
  };

  const addEntry = (newEntry: JournalEntry) => {
    const updatedEntries = [newEntry, ...entries];
    saveEntries(updatedEntries);
  };

  const updateEntry = (id: string, updatedData: Partial<JournalEntry>) => {
    const updatedEntries = entries.map(entry =>
      entry.id === id ? { ...entry, ...updatedData } : entry
    );
    saveEntries(updatedEntries);
  };

  return { entries, addEntry, updateEntry };
};
